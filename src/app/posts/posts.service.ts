import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { Subject } from 'rxjs';
import { map } from 'rxjs/operators';

import { Post } from './post.model';

@Injectable({providedIn: 'root'})

export class PostService {
  private posts: Post[] = [];
  private postsUpdated = new Subject<{ posts: Post[], postCount: number }>();
  postURL = 'http://localhost:3000/api/posts';

  constructor(private http: HttpClient,
              private router: Router) {}

  getPosts(postsPerPage: number, currentPage: number) {
    // use *backticks* - special JS feature to dynamically add values into a normal string
    const queryParams = `?pagesize=${postsPerPage}&page=${currentPage}`;

    // return [...this.posts];
    // http is built into ng, so ng will handle unsubscribe for you!
    // the get method also extracts and formats the JSON data so we can use it with javascript!
    this.http
          // using any instead of Posts[] because of the key mismatch
      .get<{ message: string, posts: any, maxPosts: number }>(this.postURL + queryParams)
      .pipe(
        map((postData) => {         // rxjs will wrap this in an observable for the upcoming subscription
          return {
            posts: postData.posts.map(post => {
              return {
                title: post.title,
                content: post.content,
                id: post._id,          // mongo stores id as _id, so we need to map it over!
                imagePath: post.imagePath,
                creator: post.creator
              };
            }),
            maxPosts: postData.maxPosts
          };
        })
      )
      .subscribe((transformedPostData) => {
        // console.log(transformedPostData);
        // automatically a safe copy, because there is no way for us to change data on the server outside of an API
        this.posts = transformedPostData.posts;
        this.postsUpdated.next({
          posts: [...this.posts],
          postCount: transformedPostData.maxPosts
        });
      });
  }

  getPostUpdateListener() {
    return this.postsUpdated.asObservable();
  }

  // get a single post (typically for editing purposes)
  getPost (id: string) {
    // Cannot use this know, because you cannot return an asynchronous action in a subscription
    // return {...this.posts.find(p => p.id === id)};
    return this.http.get<{ _id: string, title: string, content: string, imagePath: string, creator: string }>(this.postURL + "/" + id);
  }

  addPost(title: string, content: string, image: File) {
    // sending json - won't work once we add images
    // const post: Post = { id: null, title: title, content: content };
    const postData = new FormData();
    postData.append('title', title);
    postData.append('content', content);
    postData.append('image', image, title);
    this.http
      .post<{message: string, post: Post}>( // get a post now, instead of a postId
        this.postURL,
        postData
      )
      .subscribe((responseData) => {
        // Everything is handled in ngOnInit, because we are navigating back to the list,
        //      so we don't need it all here!!!
        // const post: Post = {
        //   id: responseData.post.id,
        //   title: title,
        //   content: content,
        //   imagePath: responseData.post.imagePath
        // };
        // // updating the id when we successfully add a new post to the database
        // //    initially null, now updated with the automatic id generated by the database
        // // post.id = responseData.postId;   // we are going to do this later

        // // no longer 'optimistic' because we are inside the subscribe method,
        // //    which will execute asynchronously *only* once we have a success response
        // //    (the first argument is only called for success responses)
        // this.posts.push(post);
        // this.postsUpdated.next([...this.posts]);
        this.router.navigate(['/']);
      });
    // optimistic updating (updating local data before confirmation of update server-side)
    // this.posts.push(post);
    // this.postsUpdated.next([...this.posts]);
  }

  updatePost(id: string, title: string, content: string, image: File | string) {
    // const post: Post = { id: id, title: title, content: content, imagePath: null };
    let postData: Post | FormData;
    if (typeof(image) === 'object') {
      // create a form data object
      postData = new FormData();
      postData.append("id", id);
      postData.append("title", title);
      postData.append("content", content);
      postData.append("image", image, title);
    } else {
      // we have a string as an image, and can send normal JSON data
      postData = {
        id: id,
        title: title,
        content: content,
        imagePath: image,
        creator: null
      };
    }
    this.http
      .put(this.postURL + "/" + id, postData)
      .subscribe(response => {
        // Everything is handled in ngOnInit, because we are navigating back to the list,
        //      so we don't need it all here!!!
        // const updatedPosts = [...this.posts];
        // const oldPostIndex = updatedPosts.findIndex(p => p.id === id);
        // const post: Post = {
        //   id: id,
        //   title: title,
        //   content: content,
        //   imagePath: ''
        // };
        // updatedPosts[oldPostIndex] = post;
        // this.posts = updatedPosts;
        // this.postsUpdated.next([...this.posts]);
        this.router.navigate(['/']);
      });
  }

  deletePost(postId: string) {
    return this.http.delete(this.postURL + "/" + postId);
      // Better to return the http call and subscribe in the post-list component instead
      // .subscribe(() => {
      //   // console.log('Deleted!');
      //   // filter out the deleted post from the current array of posts in the front end
      //   const updatedPosts = this.posts.filter(post => post.id !== postId);
      //   this.posts = updatedPosts;
      //   this.postsUpdated.next([...this.posts]);  // now the service knows about the change!
      // });
  }
}
